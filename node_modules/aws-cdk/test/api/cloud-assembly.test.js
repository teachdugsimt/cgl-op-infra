"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cxschema = require("@aws-cdk/cloud-assembly-schema");
const cloud_assembly_1 = require("../../lib/api/cxapp/cloud-assembly");
const util_1 = require("../util");
test('do not throw when selecting stack without errors', async () => {
    // GIVEN
    const cxasm = await testCloudAssembly();
    // WHEN
    const selected = await cxasm.selectStacks(['withouterrors'], {
        defaultBehavior: cloud_assembly_1.DefaultSelection.AllStacks,
    });
    selected.processMetadataMessages();
    // THEN
    expect(selected.firstStack.template.resource).toBe('noerrorresource');
});
test('do throw when selecting stack with errors', async () => {
    // GIVEN
    const cxasm = await testCloudAssembly();
    // WHEN
    const selected = await cxasm.selectStacks(['witherrors'], {
        defaultBehavior: cloud_assembly_1.DefaultSelection.AllStacks,
    });
    // THEN
    expect(() => selected.processMetadataMessages()).toThrow(/Found errors/);
});
test('select behavior: all', async () => {
    // GIVEN
    const cxasm = await testCloudAssembly();
    // WHEN
    const x = await cxasm.selectStacks([], { defaultBehavior: cloud_assembly_1.DefaultSelection.AllStacks });
    // THEN
    expect(x.stackCount).toBe(2);
});
test('select behavior: none', async () => {
    // GIVEN
    const cxasm = await testCloudAssembly();
    // WHEN
    const x = await cxasm.selectStacks([], { defaultBehavior: cloud_assembly_1.DefaultSelection.None });
    // THEN
    expect(x.stackCount).toBe(0);
});
test('select behavior: single', async () => {
    // GIVEN
    const cxasm = await testCloudAssembly();
    // WHEN
    await expect(cxasm.selectStacks([], { defaultBehavior: cloud_assembly_1.DefaultSelection.OnlySingle }))
        .rejects.toThrow('Since this app includes more than a single stack, specify which stacks to use (wildcards are supported) or specify `--all`');
});
test('select behavior: repeat', async () => {
    // GIVEN
    const cxasm = await testCloudAssembly();
    // WHEN
    const x = await cxasm.selectStacks(['withouterrors', 'withouterrors'], {
        defaultBehavior: cloud_assembly_1.DefaultSelection.AllStacks,
    });
    // THEN
    expect(x.stackCount).toBe(1);
});
test('select behavior with nested assemblies: all', async () => {
    // GIVEN
    const cxasm = await testNestedCloudAssembly();
    // WHEN
    const x = await cxasm.selectStacks([], { defaultBehavior: cloud_assembly_1.DefaultSelection.AllStacks });
    // THEN
    expect(x.stackCount).toBe(3);
});
test('select behavior with nested assemblies: none', async () => {
    // GIVEN
    const cxasm = await testNestedCloudAssembly();
    // WHEN
    const x = await cxasm.selectStacks([], { defaultBehavior: cloud_assembly_1.DefaultSelection.None });
    // THEN
    expect(x.stackCount).toBe(0);
});
test('select behavior with nested assemblies: single', async () => {
    // GIVEN
    const cxasm = await testNestedCloudAssembly();
    // WHEN
    await expect(cxasm.selectStacks([], { defaultBehavior: cloud_assembly_1.DefaultSelection.OnlySingle }))
        .rejects.toThrow('Since this app includes more than a single stack, specify which stacks to use (wildcards are supported) or specify `--all`');
});
test('select behavior with nested assemblies: repeat', async () => {
    // GIVEN
    const cxasm = await testNestedCloudAssembly();
    // WHEN
    const x = await cxasm.selectStacks(['withouterrors', 'withouterrors', 'nested'], {
        defaultBehavior: cloud_assembly_1.DefaultSelection.AllStacks,
    });
    // THEN
    expect(x.stackCount).toBe(2);
});
async function testCloudAssembly({ env } = {}) {
    const cloudExec = new util_1.MockCloudExecutable({
        stacks: [{
                stackName: 'withouterrors',
                env,
                template: { resource: 'noerrorresource' },
            },
            {
                stackName: 'witherrors',
                env,
                template: { resource: 'errorresource' },
                metadata: {
                    '/resource': [
                        {
                            type: cxschema.ArtifactMetadataEntryType.ERROR,
                            data: 'this is an error',
                        },
                    ],
                },
            }],
    });
    return cloudExec.synthesize();
}
async function testNestedCloudAssembly({ env } = {}) {
    const cloudExec = new util_1.MockCloudExecutable({
        stacks: [{
                stackName: 'withouterrors',
                env,
                template: { resource: 'noerrorresource' },
            },
            {
                stackName: 'witherrors',
                env,
                template: { resource: 'errorresource' },
                metadata: {
                    '/resource': [
                        {
                            type: cxschema.ArtifactMetadataEntryType.ERROR,
                            data: 'this is an error',
                        },
                    ],
                },
            }],
        nestedAssemblies: [{
                stacks: [{
                        stackName: 'nested',
                        env,
                        template: { resource: 'nestederror' },
                        metadata: {
                            '/resource': [
                                {
                                    type: cxschema.ArtifactMetadataEntryType.ERROR,
                                    data: 'this is another error',
                                },
                            ],
                        },
                    }],
            }],
    });
    return cloudExec.synthesize();
}
//# sourceMappingURL=data:application/json;base64,