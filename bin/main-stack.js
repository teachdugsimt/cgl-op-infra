#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("source-map-support/register");
const cdk = require("@aws-cdk/core");
const nested_stack_1 = require("../lib/db-stack/nested-stack");
const secrets_manager_stack_1 = require("../lib/secrets-manager-stack/secrets-manager-stack");
const cognito_stack_1 = require("../lib/cognito-stack/cognito-stack");
const dynamo_db_stack_1 = require("../lib/dynamo-db-stack/dynamo-db-stack");
const cargolink_document_stack_1 = require("../lib/s3-cargolink-document-stack/cargolink-document-stack");
const pinpoint_stack_1 = require("../lib/pinpoint-stack/pinpoint-stack");
const kms_stack_1 = require("../lib/kms-stack/kms-stack");
const cloudfront_stack_1 = require("../lib/cloudfront-stack/cloudfront-stack");
const child_process_1 = require("child_process");
const app = new cdk.App();
const envSgp = { region: 'ap-southeast-1' };
new nested_stack_1.MainStack(app, process.env.RDS_STACK_NAME || 'InfraStackDB', { env: envSgp });
new secrets_manager_stack_1.LegacySecretsManagerStack(app, process.env.SECRET_MANAGER_STACK_NAME || 'InfraStackSecretsHashKey', { env: envSgp });
const cognito_stack = new cognito_stack_1.CognitoStack(app, process.env.COGNITO_STACK_NAME || 'InfraStackCognito', { env: envSgp });
new dynamo_db_stack_1.DynamoDBStack(app, process.env.DYNAMO_STACK_NAME || 'InfraStackDynamoDB', { env: envSgp });
new cargolink_document_stack_1.CargolinkDocumentStack(app, process.env.S3_STACK_NAME || 'InfraStackS3CargolinkDocument', { env: envSgp });
new pinpoint_stack_1.PinpointStack(app, process.env.PINPOINT_STACK_NAME || 'InfraStackPinPoint', { env: envSgp });
new kms_stack_1.KmsStack(app, process.env.KMS_STACK_NAME || 'InfraStackKms', { env: envSgp });
// const apigw_stack = new ApiGatewayStack(app, process.env.API_GATEWAY_STACK_NAME || "InfraStackApiGwateway", { env: envSgp })
// exec('aws cloudformation list-exports --region ap-southeast-1')
const ls = child_process_1.spawn("aws", ["cloudformation", "list-exports"]);
ls.stdout.on("data", data => {
    const exports = JSON.parse(data.toString('utf-8'));
    const exportedList = exports.Exports.filter((e) => e.Name == 'ApiGatewayStack:APIGwCglOpAPIUrl');
    if (exportedList.length > 0) {
        const gwUrl = exportedList[0].Value;
        // cdk.Fn.importValue('ApiGatewayStack:APIGwCglOpAPIUrl')
        console.log('GWURL', exportedList[0].Value);
        new cloudfront_stack_1.CloudFrontStack(app, process.env.CLOUDFRONT_STACK_NAME || "InfraCloudFrontTest", {
            env: envSgp,
            apigwUrl: gwUrl.replace(/(^\w+:|^)\/\//, '')
        });
    }
});
ls.stderr.on("data", data => {
    console.log(`stderr: ${data}`);
});
ls.on('error', (error) => {
    console.log(`error: ${error.message}`);
});
ls.on("close", code => {
    console.log(`child process exited with code ${code}`);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1zdGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1haW4tc3RhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsdUNBQXFDO0FBQ3JDLHFDQUFxQztBQUdyQywrREFBeUQ7QUFDekQsOEZBQStGO0FBQy9GLHNFQUFrRTtBQUNsRSw0RUFBdUU7QUFDdkUsMEdBQXFHO0FBQ3JHLHlFQUFxRTtBQUNyRSwwREFBc0Q7QUFDdEQsK0VBQTBFO0FBRTFFLGlEQUFzQztBQUV0QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUUxQixNQUFNLE1BQU0sR0FBRyxFQUFFLE1BQU0sRUFBRSxnQkFBZ0IsRUFBRSxDQUFBO0FBQzNDLElBQUksd0JBQVMsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLElBQUksY0FBYyxFQUFFLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7QUFDbEYsSUFBSSxpREFBeUIsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyx5QkFBeUIsSUFBSSwwQkFBMEIsRUFBRSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0FBQ3pILE1BQU0sYUFBYSxHQUFHLElBQUksNEJBQVksQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsSUFBSSxtQkFBbUIsRUFBRSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0FBQ3BILElBQUksK0JBQWEsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsSUFBSSxvQkFBb0IsRUFBRSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0FBQy9GLElBQUksaURBQXNCLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxJQUFJLCtCQUErQixFQUFFLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7QUFDL0csSUFBSSw4QkFBYSxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixJQUFJLG9CQUFvQixFQUFFLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7QUFDakcsSUFBSSxvQkFBUSxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsSUFBSSxlQUFlLEVBQUUsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztBQUNsRiwrSEFBK0g7QUFFL0gsa0VBQWtFO0FBQ2xFLE1BQU0sRUFBRSxHQUFHLHFCQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQztBQUM1RCxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUU7SUFDeEIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUE7SUFFbEQsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksa0NBQWtDLENBQUMsQ0FBQTtJQUNyRyxJQUFJLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQ3pCLE1BQU0sS0FBSyxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUE7UUFDbkMseURBQXlEO1FBQ3pELE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUMzQyxJQUFJLGtDQUFlLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLElBQUkscUJBQXFCLEVBQUU7WUFDakYsR0FBRyxFQUFFLE1BQU07WUFDWCxRQUFRLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUFDO1NBQy9DLENBQUMsQ0FBQztLQUNOO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUU7SUFDeEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFDLENBQUM7QUFDbkMsQ0FBQyxDQUFDLENBQUM7QUFFSCxFQUFFLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO0lBQ3JCLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUMzQyxDQUFDLENBQUMsQ0FBQztBQUVILEVBQUUsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFO0lBQ2xCLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0NBQWtDLElBQUksRUFBRSxDQUFDLENBQUM7QUFDMUQsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXG5pbXBvcnQgJ3NvdXJjZS1tYXAtc3VwcG9ydC9yZWdpc3Rlcic7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgKiBhcyBBV1MgZnJvbSAnYXdzLXNkaydcblxuaW1wb3J0IHsgTWFpblN0YWNrIH0gZnJvbSAnLi4vbGliL2RiLXN0YWNrL25lc3RlZC1zdGFjayc7XG5pbXBvcnQgeyBMZWdhY3lTZWNyZXRzTWFuYWdlclN0YWNrIH0gZnJvbSAnLi4vbGliL3NlY3JldHMtbWFuYWdlci1zdGFjay9zZWNyZXRzLW1hbmFnZXItc3RhY2snO1xuaW1wb3J0IHsgQ29nbml0b1N0YWNrIH0gZnJvbSAnLi4vbGliL2NvZ25pdG8tc3RhY2svY29nbml0by1zdGFjayc7XG5pbXBvcnQgeyBEeW5hbW9EQlN0YWNrIH0gZnJvbSAnLi4vbGliL2R5bmFtby1kYi1zdGFjay9keW5hbW8tZGItc3RhY2snO1xuaW1wb3J0IHsgQ2FyZ29saW5rRG9jdW1lbnRTdGFjayB9IGZyb20gJy4uL2xpYi9zMy1jYXJnb2xpbmstZG9jdW1lbnQtc3RhY2svY2FyZ29saW5rLWRvY3VtZW50LXN0YWNrJztcbmltcG9ydCB7IFBpbnBvaW50U3RhY2sgfSBmcm9tIFwiLi4vbGliL3BpbnBvaW50LXN0YWNrL3BpbnBvaW50LXN0YWNrXCI7XG5pbXBvcnQgeyBLbXNTdGFjayB9IGZyb20gXCIuLi9saWIva21zLXN0YWNrL2ttcy1zdGFja1wiO1xuaW1wb3J0IHsgQ2xvdWRGcm9udFN0YWNrIH0gZnJvbSAnLi4vbGliL2Nsb3VkZnJvbnQtc3RhY2svY2xvdWRmcm9udC1zdGFjaydcbmltcG9ydCB7IEFwaUdhdGV3YXlTdGFjayB9IGZyb20gJy4uL2xpYi9hcGktZ2F0ZXdheS1zdGFjay9hcGktZ2F0ZXdheS1zdGFjayc7XG5pbXBvcnQgeyBzcGF3biB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuXG5jb25zdCBlbnZTZ3AgPSB7IHJlZ2lvbjogJ2FwLXNvdXRoZWFzdC0xJyB9XG5uZXcgTWFpblN0YWNrKGFwcCwgcHJvY2Vzcy5lbnYuUkRTX1NUQUNLX05BTUUgfHwgJ0luZnJhU3RhY2tEQicsIHsgZW52OiBlbnZTZ3AgfSk7XG5uZXcgTGVnYWN5U2VjcmV0c01hbmFnZXJTdGFjayhhcHAsIHByb2Nlc3MuZW52LlNFQ1JFVF9NQU5BR0VSX1NUQUNLX05BTUUgfHwgJ0luZnJhU3RhY2tTZWNyZXRzSGFzaEtleScsIHsgZW52OiBlbnZTZ3AgfSk7XG5jb25zdCBjb2duaXRvX3N0YWNrID0gbmV3IENvZ25pdG9TdGFjayhhcHAsIHByb2Nlc3MuZW52LkNPR05JVE9fU1RBQ0tfTkFNRSB8fCAnSW5mcmFTdGFja0NvZ25pdG8nLCB7IGVudjogZW52U2dwIH0pO1xubmV3IER5bmFtb0RCU3RhY2soYXBwLCBwcm9jZXNzLmVudi5EWU5BTU9fU1RBQ0tfTkFNRSB8fCAnSW5mcmFTdGFja0R5bmFtb0RCJywgeyBlbnY6IGVudlNncCB9KTtcbm5ldyBDYXJnb2xpbmtEb2N1bWVudFN0YWNrKGFwcCwgcHJvY2Vzcy5lbnYuUzNfU1RBQ0tfTkFNRSB8fCAnSW5mcmFTdGFja1MzQ2FyZ29saW5rRG9jdW1lbnQnLCB7IGVudjogZW52U2dwIH0pO1xubmV3IFBpbnBvaW50U3RhY2soYXBwLCBwcm9jZXNzLmVudi5QSU5QT0lOVF9TVEFDS19OQU1FIHx8ICdJbmZyYVN0YWNrUGluUG9pbnQnLCB7IGVudjogZW52U2dwIH0pO1xubmV3IEttc1N0YWNrKGFwcCwgcHJvY2Vzcy5lbnYuS01TX1NUQUNLX05BTUUgfHwgJ0luZnJhU3RhY2tLbXMnLCB7IGVudjogZW52U2dwIH0pO1xuLy8gY29uc3QgYXBpZ3dfc3RhY2sgPSBuZXcgQXBpR2F0ZXdheVN0YWNrKGFwcCwgcHJvY2Vzcy5lbnYuQVBJX0dBVEVXQVlfU1RBQ0tfTkFNRSB8fCBcIkluZnJhU3RhY2tBcGlHd2F0ZXdheVwiLCB7IGVudjogZW52U2dwIH0pXG5cbi8vIGV4ZWMoJ2F3cyBjbG91ZGZvcm1hdGlvbiBsaXN0LWV4cG9ydHMgLS1yZWdpb24gYXAtc291dGhlYXN0LTEnKVxuY29uc3QgbHMgPSBzcGF3bihcImF3c1wiLCBbXCJjbG91ZGZvcm1hdGlvblwiLCBcImxpc3QtZXhwb3J0c1wiXSk7XG5scy5zdGRvdXQub24oXCJkYXRhXCIsIGRhdGEgPT4ge1xuICAgIGNvbnN0IGV4cG9ydHMgPSBKU09OLnBhcnNlKGRhdGEudG9TdHJpbmcoJ3V0Zi04JykpXG5cbiAgICBjb25zdCBleHBvcnRlZExpc3QgPSBleHBvcnRzLkV4cG9ydHMuZmlsdGVyKChlOiBhbnkpID0+IGUuTmFtZSA9PSAnQXBpR2F0ZXdheVN0YWNrOkFQSUd3Q2dsT3BBUElVcmwnKVxuICAgIGlmIChleHBvcnRlZExpc3QubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBnd1VybCA9IGV4cG9ydGVkTGlzdFswXS5WYWx1ZVxuICAgICAgICAvLyBjZGsuRm4uaW1wb3J0VmFsdWUoJ0FwaUdhdGV3YXlTdGFjazpBUElHd0NnbE9wQVBJVXJsJylcbiAgICAgICAgY29uc29sZS5sb2coJ0dXVVJMJywgZXhwb3J0ZWRMaXN0WzBdLlZhbHVlKVxuICAgICAgICBuZXcgQ2xvdWRGcm9udFN0YWNrKGFwcCwgcHJvY2Vzcy5lbnYuQ0xPVURGUk9OVF9TVEFDS19OQU1FIHx8IFwiSW5mcmFDbG91ZEZyb250VGVzdFwiLCB7XG4gICAgICAgICAgICBlbnY6IGVudlNncCxcbiAgICAgICAgICAgIGFwaWd3VXJsOiBnd1VybC5yZXBsYWNlKC8oXlxcdys6fF4pXFwvXFwvLywgJycpXG4gICAgICAgIH0pO1xuICAgIH1cbn0pO1xuXG5scy5zdGRlcnIub24oXCJkYXRhXCIsIGRhdGEgPT4ge1xuICAgIGNvbnNvbGUubG9nKGBzdGRlcnI6ICR7ZGF0YX1gKTtcbn0pO1xuXG5scy5vbignZXJyb3InLCAoZXJyb3IpID0+IHtcbiAgICBjb25zb2xlLmxvZyhgZXJyb3I6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbn0pO1xuXG5scy5vbihcImNsb3NlXCIsIGNvZGUgPT4ge1xuICAgIGNvbnNvbGUubG9nKGBjaGlsZCBwcm9jZXNzIGV4aXRlZCB3aXRoIGNvZGUgJHtjb2RlfWApO1xufSk7XG5cbiJdfQ==