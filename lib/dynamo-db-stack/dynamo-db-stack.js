"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DynamoDBStack = void 0;
const cdk = require("@aws-cdk/core");
const dynamodb = require("@aws-cdk/aws-dynamodb");
class DynamoDBStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        // // dynamo db
        // new dynamodb.Table(this, 'CGLUserAuthorize', {
        //     tableName: "cgl_user_authentication",
        //     partitionKey: { name: 'username', type: dynamodb.AttributeType.STRING },
        //     // TableEncryption.CUSTOMER_MANAGED
        //     // encryption: dynamodb.TableEncryption.CUSTOMER_MANAGED,
        //     // encryptionKey:  {password: },
        // });
        // dynamo db
        const otpTable = new dynamodb.Table(this, 'CglOtpTable', {
            tableName: 'cgl_otp',
            partitionKey: { name: 'variant', type: dynamodb.AttributeType.STRING }
        });
        const userTable = new dynamodb.Table(this, 'CglUserTable', {
            tableName: 'cgl_user',
            partitionKey: { name: 'username', type: dynamodb.AttributeType.STRING },
        });
        const attachTable = new dynamodb.Table(this, 'CGLAttachCode', {
            tableName: "cgl_attach_code",
            partitionKey: { name: 'attach_code', type: dynamodb.AttributeType.STRING },
            sortKey: { name: "user_id", type: dynamodb.AttributeType.STRING }
            // TableEncryption.CUSTOMER_MANAGED
            // encryption: dynamodb.TableEncryption.CUSTOMER_MANAGED,
            // encryptionKey:  {password: },
        });
    }
}
exports.DynamoDBStack = DynamoDBStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1vLWRiLXN0YWNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZHluYW1vLWRiLXN0YWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHFDQUFxQztBQUNyQyxrREFBa0Q7QUFDbEQsTUFBYSxhQUFjLFNBQVEsR0FBRyxDQUFDLEtBQUs7SUFFeEMsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFzQjtRQUNoRSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN4QixlQUFlO1FBQ2YsaURBQWlEO1FBQ2pELDRDQUE0QztRQUM1QywrRUFBK0U7UUFDL0UsMENBQTBDO1FBQzFDLGdFQUFnRTtRQUNoRSx1Q0FBdUM7UUFDdkMsTUFBTTtRQUVOLFlBQVk7UUFDWixNQUFNLFFBQVEsR0FBRyxJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLGFBQWEsRUFBRTtZQUNyRCxTQUFTLEVBQUUsU0FBUztZQUNwQixZQUFZLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRTtTQUN6RSxDQUFDLENBQUM7UUFFSCxNQUFNLFNBQVMsR0FBRyxJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRTtZQUN2RCxTQUFTLEVBQUUsVUFBVTtZQUNyQixZQUFZLEVBQUUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRTtTQUUxRSxDQUFDLENBQUM7UUFFSCxNQUFNLFdBQVcsR0FBRyxJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLGVBQWUsRUFBRTtZQUMxRCxTQUFTLEVBQUUsaUJBQWlCO1lBQzVCLFlBQVksRUFBRSxFQUFFLElBQUksRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLFFBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFO1lBQzFFLE9BQU8sRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLFFBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFO1lBQ2pFLG1DQUFtQztZQUNuQyx5REFBeUQ7WUFDekQsZ0NBQWdDO1NBQ25DLENBQUMsQ0FBQztJQUVQLENBQUM7Q0FDSjtBQW5DRCxzQ0FtQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjZGsgZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgKiBhcyBkeW5hbW9kYiBmcm9tICdAYXdzLWNkay9hd3MtZHluYW1vZGInO1xuZXhwb3J0IGNsYXNzIER5bmFtb0RCU3RhY2sgZXh0ZW5kcyBjZGsuU3RhY2sge1xuXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IGNkay5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzPzogY2RrLlN0YWNrUHJvcHMpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XG4gICAgICAgIC8vIC8vIGR5bmFtbyBkYlxuICAgICAgICAvLyBuZXcgZHluYW1vZGIuVGFibGUodGhpcywgJ0NHTFVzZXJBdXRob3JpemUnLCB7XG4gICAgICAgIC8vICAgICB0YWJsZU5hbWU6IFwiY2dsX3VzZXJfYXV0aGVudGljYXRpb25cIixcbiAgICAgICAgLy8gICAgIHBhcnRpdGlvbktleTogeyBuYW1lOiAndXNlcm5hbWUnLCB0eXBlOiBkeW5hbW9kYi5BdHRyaWJ1dGVUeXBlLlNUUklORyB9LFxuICAgICAgICAvLyAgICAgLy8gVGFibGVFbmNyeXB0aW9uLkNVU1RPTUVSX01BTkFHRURcbiAgICAgICAgLy8gICAgIC8vIGVuY3J5cHRpb246IGR5bmFtb2RiLlRhYmxlRW5jcnlwdGlvbi5DVVNUT01FUl9NQU5BR0VELFxuICAgICAgICAvLyAgICAgLy8gZW5jcnlwdGlvbktleTogIHtwYXNzd29yZDogfSxcbiAgICAgICAgLy8gfSk7XG5cbiAgICAgICAgLy8gZHluYW1vIGRiXG4gICAgICAgIGNvbnN0IG90cFRhYmxlID0gbmV3IGR5bmFtb2RiLlRhYmxlKHRoaXMsICdDZ2xPdHBUYWJsZScsIHtcbiAgICAgICAgICAgIHRhYmxlTmFtZTogJ2NnbF9vdHAnLFxuICAgICAgICAgICAgcGFydGl0aW9uS2V5OiB7IG5hbWU6ICd2YXJpYW50JywgdHlwZTogZHluYW1vZGIuQXR0cmlidXRlVHlwZS5TVFJJTkcgfVxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCB1c2VyVGFibGUgPSBuZXcgZHluYW1vZGIuVGFibGUodGhpcywgJ0NnbFVzZXJUYWJsZScsIHtcbiAgICAgICAgICAgIHRhYmxlTmFtZTogJ2NnbF91c2VyJyxcbiAgICAgICAgICAgIHBhcnRpdGlvbktleTogeyBuYW1lOiAndXNlcm5hbWUnLCB0eXBlOiBkeW5hbW9kYi5BdHRyaWJ1dGVUeXBlLlNUUklORyB9LFxuICAgICAgICAgICAgLy8gc29ydEtleTogeyBuYW1lOiAncGFzc3dvcmQnLCB0eXBlOiBkeW5hbW9kYi5BdHRyaWJ1dGVUeXBlLlNUUklORyB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGF0dGFjaFRhYmxlID0gbmV3IGR5bmFtb2RiLlRhYmxlKHRoaXMsICdDR0xBdHRhY2hDb2RlJywge1xuICAgICAgICAgICAgdGFibGVOYW1lOiBcImNnbF9hdHRhY2hfY29kZVwiLFxuICAgICAgICAgICAgcGFydGl0aW9uS2V5OiB7IG5hbWU6ICdhdHRhY2hfY29kZScsIHR5cGU6IGR5bmFtb2RiLkF0dHJpYnV0ZVR5cGUuU1RSSU5HIH0sXG4gICAgICAgICAgICBzb3J0S2V5OiB7IG5hbWU6IFwidXNlcl9pZFwiLCB0eXBlOiBkeW5hbW9kYi5BdHRyaWJ1dGVUeXBlLlNUUklORyB9XG4gICAgICAgICAgICAvLyBUYWJsZUVuY3J5cHRpb24uQ1VTVE9NRVJfTUFOQUdFRFxuICAgICAgICAgICAgLy8gZW5jcnlwdGlvbjogZHluYW1vZGIuVGFibGVFbmNyeXB0aW9uLkNVU1RPTUVSX01BTkFHRUQsXG4gICAgICAgICAgICAvLyBlbmNyeXB0aW9uS2V5OiAge3Bhc3N3b3JkOiB9LFxuICAgICAgICB9KTtcblxuICAgIH1cbn1cbiJdfQ==