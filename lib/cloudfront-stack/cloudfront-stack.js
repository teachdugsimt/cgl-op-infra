"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudFrontStack = void 0;
const cdk = require("@aws-cdk/core");
const cloudfront = require("@aws-cdk/aws-cloudfront");
const origins = require("@aws-cdk/aws-cloudfront-origins");
const s3 = require("@aws-cdk/aws-s3");
class CloudFrontStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const policies = new cloudfront.CachePolicy(this, "CglCachePolicy", {
            cachePolicyName: 'allow-cors-to-authoization',
            comment: "whitelist-headers",
            enableAcceptEncodingGzip: true,
            enableAcceptEncodingBrotli: true,
            minTtl: cdk.Duration.seconds(1),
            maxTtl: cdk.Duration.seconds(1),
            defaultTtl: cdk.Duration.seconds(1),
            queryStringBehavior: cloudfront.CacheQueryStringBehavior.all(),
            headerBehavior: cloudfront.CacheHeaderBehavior.allowList('Authorization', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers', 'Acceapt-Language', 'Content-Type', 'Accept')
        });
        const cloudfrontBucket = new s3.Bucket(this, id, {
            bucketName: process.env.S3_BUCKET_NAME_CLOUDFRONT || "cgl-cloudfront-log-dev",
            accessControl: s3.BucketAccessControl.BUCKET_OWNER_FULL_CONTROL
        });
        // const importedApiGwUrl = cdk.Fn.importValue('ApiGatewayStack:APIGwCglOpAPIUrl');
        const originDomain = '2kgrbiwfnc.execute-api.ap-southeast-1.amazonaws.com';
        new cloudfront.Distribution(this, 'CglCloudFront', {
            // domainNames: ["dev.api.cargolink.co.th"],
            // certificate: certificate.Certificate.fromCertificateArn(this,
            //     'cgl-dev-certificate',
            //     'arn:aws:acm:us-east-1:029707422715:certificate/4a3367b7-5635-4a3b-9538-a21208fb3d44'),
            comment: "cargolink-cloudfront",
            logBucket: cloudfrontBucket,
            // logBucket: s3.Bucket.fromBucketArn(this, id, 'arn:aws:s3:::cgl-cloudfront-log-dev'),
            logFilePrefix: "cgl-cloudfront",
            enableLogging: true,
            enabled: true,
            enableIpv6: true,
            httpVersion: cloudfront.HttpVersion.HTTP2,
            minimumProtocolVersion: cloudfront.SecurityPolicyProtocol.TLS_V1_2_2018,
            defaultBehavior: {
                origin: new origins.HttpOrigin(props.apigwUrl.split('/')[0], {
                    originPath: '/' + props.apigwUrl.split('/')[1],
                    protocolPolicy: cloudfront.OriginProtocolPolicy.HTTPS_ONLY,
                    readTimeout: cdk.Duration.seconds(40),
                    connectionTimeout: cdk.Duration.seconds(10),
                }),
                viewerProtocolPolicy: cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,
                cachePolicy: {
                    cachePolicyId: policies.cachePolicyId
                },
                cachedMethods: { methods: ['GET', 'HEAD'] },
                allowedMethods: cloudfront.AllowedMethods.ALLOW_ALL,
            },
            priceClass: cloudfront.PriceClass.PRICE_CLASS_ALL
        });
    }
}
exports.CloudFrontStack = CloudFrontStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvdWRmcm9udC1zdGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNsb3VkZnJvbnQtc3RhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEscUNBQW9DO0FBQ3BDLHNEQUFzRDtBQUN0RCwyREFBMkQ7QUFDM0Qsc0NBQXNDO0FBU3RDLE1BQWEsZUFBZ0IsU0FBUSxHQUFHLENBQUMsS0FBSztJQUUxQyxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQTJCO1FBQ3JFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFBO1FBRXZCLE1BQU0sUUFBUSxHQUFHLElBQUksVUFBVSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLEVBQUU7WUFDaEUsZUFBZSxFQUFFLDRCQUE0QjtZQUM3QyxPQUFPLEVBQUUsbUJBQW1CO1lBQzVCLHdCQUF3QixFQUFFLElBQUk7WUFDOUIsMEJBQTBCLEVBQUUsSUFBSTtZQUNoQyxNQUFNLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQy9CLE1BQU0sRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDL0IsVUFBVSxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNuQyxtQkFBbUIsRUFBRSxVQUFVLENBQUMsd0JBQXdCLENBQUMsR0FBRyxFQUFFO1lBQzlELGNBQWMsRUFBRSxVQUFVLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLGVBQWUsRUFBRSxRQUFRLEVBQzlFLCtCQUErQixFQUMvQixnQ0FBZ0MsRUFBRSxrQkFBa0IsRUFBRSxjQUFjLEVBQUUsUUFBUSxDQUFDO1NBQ3RGLENBQUMsQ0FBQTtRQUVGLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUU7WUFDN0MsVUFBVSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMseUJBQXlCLElBQUksd0JBQXdCO1lBQzdFLGFBQWEsRUFBRSxFQUFFLENBQUMsbUJBQW1CLENBQUMseUJBQXlCO1NBQ2xFLENBQUMsQ0FBQTtRQUVGLG1GQUFtRjtRQUVuRixNQUFNLFlBQVksR0FBRyxxREFBcUQsQ0FBQTtRQUMxRSxJQUFJLFVBQVUsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLGVBQWUsRUFBRTtZQUMvQyw0Q0FBNEM7WUFDNUMsZ0VBQWdFO1lBQ2hFLDZCQUE2QjtZQUM3Qiw4RkFBOEY7WUFDOUYsT0FBTyxFQUFFLHNCQUFzQjtZQUMvQixTQUFTLEVBQUUsZ0JBQWdCO1lBQzNCLHVGQUF1RjtZQUN2RixhQUFhLEVBQUUsZ0JBQWdCO1lBQy9CLGFBQWEsRUFBRSxJQUFJO1lBQ25CLE9BQU8sRUFBRSxJQUFJO1lBQ2IsVUFBVSxFQUFFLElBQUk7WUFDaEIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxXQUFXLENBQUMsS0FBSztZQUN6QyxzQkFBc0IsRUFBRSxVQUFVLENBQUMsc0JBQXNCLENBQUMsYUFBYTtZQUN2RSxlQUFlLEVBQUU7Z0JBQ2IsTUFBTSxFQUFFLElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtvQkFDekQsVUFBVSxFQUFFLEdBQUcsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQzlDLGNBQWMsRUFBRSxVQUFVLENBQUMsb0JBQW9CLENBQUMsVUFBVTtvQkFDMUQsV0FBVyxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztvQkFDckMsaUJBQWlCLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO2lCQUM5QyxDQUFDO2dCQUNGLG9CQUFvQixFQUFFLFVBQVUsQ0FBQyxvQkFBb0IsQ0FBQyxpQkFBaUI7Z0JBQ3ZFLFdBQVcsRUFBRTtvQkFDVCxhQUFhLEVBQUUsUUFBUSxDQUFDLGFBQWE7aUJBQ3hDO2dCQUVELGFBQWEsRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsRUFBRTtnQkFDM0MsY0FBYyxFQUFFLFVBQVUsQ0FBQyxjQUFjLENBQUMsU0FBUzthQUN0RDtZQUNELFVBQVUsRUFBRSxVQUFVLENBQUMsVUFBVSxDQUFDLGVBQWU7U0FDcEQsQ0FBQyxDQUFBO0lBRU4sQ0FBQztDQUVKO0FBN0RELDBDQTZEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNkayBmcm9tICdAYXdzLWNkay9jb3JlJ1xuaW1wb3J0ICogYXMgY2xvdWRmcm9udCBmcm9tICdAYXdzLWNkay9hd3MtY2xvdWRmcm9udCc7XG5pbXBvcnQgKiAgYXMgb3JpZ2lucyBmcm9tICdAYXdzLWNkay9hd3MtY2xvdWRmcm9udC1vcmlnaW5zJ1xuaW1wb3J0ICogYXMgIHMzIGZyb20gJ0Bhd3MtY2RrL2F3cy1zMydcbmltcG9ydCAqIGFzIGNlcnRpZmljYXRlIGZyb20gJ0Bhd3MtY2RrL2F3cy1jZXJ0aWZpY2F0ZW1hbmFnZXInXG5pbXBvcnQgKiBhcyByb3V0ZTUzIGZyb20gJ0Bhd3MtY2RrL2F3cy1yb3V0ZTUzJztcbmltcG9ydCB7IFVSTCB9IGZyb20gJ3VybCc7XG5cblxuaW50ZXJmYWNlIENsb3VkZnJvbnRTdGFja1Byb3BzIGV4dGVuZHMgY2RrLlN0YWNrUHJvcHMge1xuICAgIGFwaWd3VXJsOiBzdHJpbmdcbn1cbmV4cG9ydCBjbGFzcyBDbG91ZEZyb250U3RhY2sgZXh0ZW5kcyBjZGsuU3RhY2sge1xuXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IGNkay5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBDbG91ZGZyb250U3RhY2tQcm9wcykge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKVxuXG4gICAgICAgIGNvbnN0IHBvbGljaWVzID0gbmV3IGNsb3VkZnJvbnQuQ2FjaGVQb2xpY3kodGhpcywgXCJDZ2xDYWNoZVBvbGljeVwiLCB7XG4gICAgICAgICAgICBjYWNoZVBvbGljeU5hbWU6ICdhbGxvdy1jb3JzLXRvLWF1dGhvaXphdGlvbicsXG4gICAgICAgICAgICBjb21tZW50OiBcIndoaXRlbGlzdC1oZWFkZXJzXCIsXG4gICAgICAgICAgICBlbmFibGVBY2NlcHRFbmNvZGluZ0d6aXA6IHRydWUsXG4gICAgICAgICAgICBlbmFibGVBY2NlcHRFbmNvZGluZ0Jyb3RsaTogdHJ1ZSxcbiAgICAgICAgICAgIG1pblR0bDogY2RrLkR1cmF0aW9uLnNlY29uZHMoMSksXG4gICAgICAgICAgICBtYXhUdGw6IGNkay5EdXJhdGlvbi5zZWNvbmRzKDEpLFxuICAgICAgICAgICAgZGVmYXVsdFR0bDogY2RrLkR1cmF0aW9uLnNlY29uZHMoMSksXG4gICAgICAgICAgICBxdWVyeVN0cmluZ0JlaGF2aW9yOiBjbG91ZGZyb250LkNhY2hlUXVlcnlTdHJpbmdCZWhhdmlvci5hbGwoKSxcbiAgICAgICAgICAgIGhlYWRlckJlaGF2aW9yOiBjbG91ZGZyb250LkNhY2hlSGVhZGVyQmVoYXZpb3IuYWxsb3dMaXN0KCdBdXRob3JpemF0aW9uJywgJ09yaWdpbicsXG4gICAgICAgICAgICAgICAgJ0FjY2Vzcy1Db250cm9sLVJlcXVlc3QtTWV0aG9kJyxcbiAgICAgICAgICAgICAgICAnQWNjZXNzLUNvbnRyb2wtUmVxdWVzdC1IZWFkZXJzJywgJ0FjY2VhcHQtTGFuZ3VhZ2UnLCAnQ29udGVudC1UeXBlJywgJ0FjY2VwdCcpXG4gICAgICAgIH0pXG5cbiAgICAgICAgY29uc3QgY2xvdWRmcm9udEJ1Y2tldCA9IG5ldyBzMy5CdWNrZXQodGhpcywgaWQsIHtcbiAgICAgICAgICAgIGJ1Y2tldE5hbWU6IHByb2Nlc3MuZW52LlMzX0JVQ0tFVF9OQU1FX0NMT1VERlJPTlQgfHwgXCJjZ2wtY2xvdWRmcm9udC1sb2ctZGV2XCIsXG4gICAgICAgICAgICBhY2Nlc3NDb250cm9sOiBzMy5CdWNrZXRBY2Nlc3NDb250cm9sLkJVQ0tFVF9PV05FUl9GVUxMX0NPTlRST0xcbiAgICAgICAgfSlcblxuICAgICAgICAvLyBjb25zdCBpbXBvcnRlZEFwaUd3VXJsID0gY2RrLkZuLmltcG9ydFZhbHVlKCdBcGlHYXRld2F5U3RhY2s6QVBJR3dDZ2xPcEFQSVVybCcpO1xuXG4gICAgICAgIGNvbnN0IG9yaWdpbkRvbWFpbiA9ICcya2dyYml3Zm5jLmV4ZWN1dGUtYXBpLmFwLXNvdXRoZWFzdC0xLmFtYXpvbmF3cy5jb20nXG4gICAgICAgIG5ldyBjbG91ZGZyb250LkRpc3RyaWJ1dGlvbih0aGlzLCAnQ2dsQ2xvdWRGcm9udCcsIHtcbiAgICAgICAgICAgIC8vIGRvbWFpbk5hbWVzOiBbXCJkZXYuYXBpLmNhcmdvbGluay5jby50aFwiXSxcbiAgICAgICAgICAgIC8vIGNlcnRpZmljYXRlOiBjZXJ0aWZpY2F0ZS5DZXJ0aWZpY2F0ZS5mcm9tQ2VydGlmaWNhdGVBcm4odGhpcyxcbiAgICAgICAgICAgIC8vICAgICAnY2dsLWRldi1jZXJ0aWZpY2F0ZScsXG4gICAgICAgICAgICAvLyAgICAgJ2Fybjphd3M6YWNtOnVzLWVhc3QtMTowMjk3MDc0MjI3MTU6Y2VydGlmaWNhdGUvNGEzMzY3YjctNTYzNS00YTNiLTk1MzgtYTIxMjA4ZmIzZDQ0JyksXG4gICAgICAgICAgICBjb21tZW50OiBcImNhcmdvbGluay1jbG91ZGZyb250XCIsXG4gICAgICAgICAgICBsb2dCdWNrZXQ6IGNsb3VkZnJvbnRCdWNrZXQsXG4gICAgICAgICAgICAvLyBsb2dCdWNrZXQ6IHMzLkJ1Y2tldC5mcm9tQnVja2V0QXJuKHRoaXMsIGlkLCAnYXJuOmF3czpzMzo6OmNnbC1jbG91ZGZyb250LWxvZy1kZXYnKSxcbiAgICAgICAgICAgIGxvZ0ZpbGVQcmVmaXg6IFwiY2dsLWNsb3VkZnJvbnRcIixcbiAgICAgICAgICAgIGVuYWJsZUxvZ2dpbmc6IHRydWUsXG4gICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgZW5hYmxlSXB2NjogdHJ1ZSxcbiAgICAgICAgICAgIGh0dHBWZXJzaW9uOiBjbG91ZGZyb250Lkh0dHBWZXJzaW9uLkhUVFAyLFxuICAgICAgICAgICAgbWluaW11bVByb3RvY29sVmVyc2lvbjogY2xvdWRmcm9udC5TZWN1cml0eVBvbGljeVByb3RvY29sLlRMU19WMV8yXzIwMTgsXG4gICAgICAgICAgICBkZWZhdWx0QmVoYXZpb3I6IHtcbiAgICAgICAgICAgICAgICBvcmlnaW46IG5ldyBvcmlnaW5zLkh0dHBPcmlnaW4ocHJvcHMuYXBpZ3dVcmwuc3BsaXQoJy8nKVswXSwge1xuICAgICAgICAgICAgICAgICAgICBvcmlnaW5QYXRoOiAnLycgKyBwcm9wcy5hcGlnd1VybC5zcGxpdCgnLycpWzFdLFxuICAgICAgICAgICAgICAgICAgICBwcm90b2NvbFBvbGljeTogY2xvdWRmcm9udC5PcmlnaW5Qcm90b2NvbFBvbGljeS5IVFRQU19PTkxZLFxuICAgICAgICAgICAgICAgICAgICByZWFkVGltZW91dDogY2RrLkR1cmF0aW9uLnNlY29uZHMoNDApLFxuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uVGltZW91dDogY2RrLkR1cmF0aW9uLnNlY29uZHMoMTApLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIHZpZXdlclByb3RvY29sUG9saWN5OiBjbG91ZGZyb250LlZpZXdlclByb3RvY29sUG9saWN5LlJFRElSRUNUX1RPX0hUVFBTLFxuICAgICAgICAgICAgICAgIGNhY2hlUG9saWN5OiB7ICAvLyAgT05seSBvbmUgcHJvcHNcbiAgICAgICAgICAgICAgICAgICAgY2FjaGVQb2xpY3lJZDogcG9saWNpZXMuY2FjaGVQb2xpY3lJZFxuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBjYWNoZWRNZXRob2RzOiB7IG1ldGhvZHM6IFsnR0VUJywgJ0hFQUQnXSB9LCAgLy8gZG9uJ3QgaGF2ZSBlZmZlY3Qgd2l0aCBBUEkgbm9ybWFsIHJlcXVlc3QgKGV4Y2x1ZGUgR0VULEhFQUQpXG4gICAgICAgICAgICAgICAgYWxsb3dlZE1ldGhvZHM6IGNsb3VkZnJvbnQuQWxsb3dlZE1ldGhvZHMuQUxMT1dfQUxMLCAgLy8gSU5DTFVERSBBTEwgUmVxdWVzdCBtZXRob2QgZm9yIEFQSSBnYXRld2F5XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJpY2VDbGFzczogY2xvdWRmcm9udC5QcmljZUNsYXNzLlBSSUNFX0NMQVNTX0FMTFxuICAgICAgICB9KVxuXG4gICAgfVxuXG59Il19