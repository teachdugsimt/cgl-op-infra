"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CognitoStack = void 0;
const cognito = require("@aws-cdk/aws-cognito");
const cdk = require("@aws-cdk/core");
class CognitoStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        // cognito
        const userPool = new cognito.UserPool(this, 'CglUserAuthentication', {
            userPoolName: 'CglUserAuthentication',
            selfSignUpEnabled: true,
            signInCaseSensitive: true,
            signInAliases: {
                email: true,
                phone: true,
            },
            autoVerify: {
                email: false,
                phone: false
            },
            mfa: cognito.Mfa.OFF,
            smsRole: undefined,
            customAttributes: {
                userId: new cognito.StringAttribute({ minLen: 8, maxLen: 12, mutable: true })
            },
            accountRecovery: cognito.AccountRecovery.EMAIL_ONLY,
            passwordPolicy: {
                minLength: 8,
            },
        });
        const clientWriteAttributes = (new cognito.ClientAttributes())
            .withStandardAttributes({
            fullname: true,
            email: true,
            phoneNumber: true,
        })
            .withCustomAttributes('userId');
        const clientReadAttributes = clientWriteAttributes;
        const client = userPool.addClient('CglUserAppClient', {
            userPoolClientName: 'CglUserAutheAppClient',
            accessTokenValidity: cdk.Duration.minutes(60),
            idTokenValidity: cdk.Duration.minutes(60),
            refreshTokenValidity: cdk.Duration.days(30),
            authFlows: {
                custom: true,
                userSrp: true,
            },
            preventUserExistenceErrors: true,
            writeAttributes: clientWriteAttributes,
            readAttributes: clientReadAttributes,
        });
        const clientId = client.userPoolClientId;
        const userPoolId = userPool.userPoolId;
    }
}
exports.CognitoStack = CognitoStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29nbml0by1zdGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvZ25pdG8tc3RhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsZ0RBQWdEO0FBQ2hELHFDQUFxQztBQUNyQyxNQUFhLFlBQWEsU0FBUSxHQUFHLENBQUMsS0FBSztJQUV2QyxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXNCO1FBQ2hFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXhCLFVBQVU7UUFDVixNQUFNLFFBQVEsR0FBRyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLHVCQUF1QixFQUFFO1lBQ2pFLFlBQVksRUFBRSx1QkFBdUI7WUFDckMsaUJBQWlCLEVBQUUsSUFBSTtZQUN2QixtQkFBbUIsRUFBRSxJQUFJO1lBQ3pCLGFBQWEsRUFBRTtnQkFDWCxLQUFLLEVBQUUsSUFBSTtnQkFDWCxLQUFLLEVBQUUsSUFBSTthQUNkO1lBQ0QsVUFBVSxFQUFFO2dCQUNSLEtBQUssRUFBRSxLQUFLO2dCQUNaLEtBQUssRUFBRSxLQUFLO2FBQ2Y7WUFDRCxHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHO1lBQ3BCLE9BQU8sRUFBRSxTQUFTO1lBQ2xCLGdCQUFnQixFQUFFO2dCQUNkLE1BQU0sRUFBRSxJQUFJLE9BQU8sQ0FBQyxlQUFlLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDO2FBQ2hGO1lBQ0QsZUFBZSxFQUFFLE9BQU8sQ0FBQyxlQUFlLENBQUMsVUFBVTtZQUNuRCxjQUFjLEVBQUU7Z0JBQ1osU0FBUyxFQUFFLENBQUM7YUFDZjtTQUNKLENBQUMsQ0FBQztRQUVILE1BQU0scUJBQXFCLEdBQUcsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO2FBQ3pELHNCQUFzQixDQUFDO1lBQ3BCLFFBQVEsRUFBRSxJQUFJO1lBQ2QsS0FBSyxFQUFFLElBQUk7WUFDWCxXQUFXLEVBQUUsSUFBSTtTQUNwQixDQUFDO2FBQ0Qsb0JBQW9CLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFcEMsTUFBTSxvQkFBb0IsR0FBRyxxQkFBcUIsQ0FBQTtRQUVsRCxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLGtCQUFrQixFQUFFO1lBQ2xELGtCQUFrQixFQUFFLHVCQUF1QjtZQUMzQyxtQkFBbUIsRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7WUFDN0MsZUFBZSxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUN6QyxvQkFBb0IsRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDM0MsU0FBUyxFQUFFO2dCQUNQLE1BQU0sRUFBRSxJQUFJO2dCQUNaLE9BQU8sRUFBRSxJQUFJO2FBQ2hCO1lBQ0QsMEJBQTBCLEVBQUUsSUFBSTtZQUNoQyxlQUFlLEVBQUUscUJBQXFCO1lBQ3RDLGNBQWMsRUFBRSxvQkFBb0I7U0FDdkMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixDQUFDO1FBQ3pDLE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUM7SUFFM0MsQ0FBQztDQUNKO0FBekRELG9DQXlEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNvZ25pdG8gZnJvbSBcIkBhd3MtY2RrL2F3cy1jb2duaXRvXCI7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5leHBvcnQgY2xhc3MgQ29nbml0b1N0YWNrIGV4dGVuZHMgY2RrLlN0YWNrIHtcblxuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiBjZGsuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wcz86IGNkay5TdGFja1Byb3BzKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xuXG4gICAgICAgIC8vIGNvZ25pdG9cbiAgICAgICAgY29uc3QgdXNlclBvb2wgPSBuZXcgY29nbml0by5Vc2VyUG9vbCh0aGlzLCAnQ2dsVXNlckF1dGhlbnRpY2F0aW9uJywge1xuICAgICAgICAgICAgdXNlclBvb2xOYW1lOiAnQ2dsVXNlckF1dGhlbnRpY2F0aW9uJyxcbiAgICAgICAgICAgIHNlbGZTaWduVXBFbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgc2lnbkluQ2FzZVNlbnNpdGl2ZTogdHJ1ZSxcbiAgICAgICAgICAgIHNpZ25JbkFsaWFzZXM6IHtcbiAgICAgICAgICAgICAgICBlbWFpbDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwaG9uZTogdHJ1ZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhdXRvVmVyaWZ5OiB7XG4gICAgICAgICAgICAgICAgZW1haWw6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHBob25lOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1mYTogY29nbml0by5NZmEuT0ZGLFxuICAgICAgICAgICAgc21zUm9sZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgY3VzdG9tQXR0cmlidXRlczoge1xuICAgICAgICAgICAgICAgIHVzZXJJZDogbmV3IGNvZ25pdG8uU3RyaW5nQXR0cmlidXRlKHsgbWluTGVuOiA4LCBtYXhMZW46IDEyLCBtdXRhYmxlOiB0cnVlIH0pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYWNjb3VudFJlY292ZXJ5OiBjb2duaXRvLkFjY291bnRSZWNvdmVyeS5FTUFJTF9PTkxZLFxuICAgICAgICAgICAgcGFzc3dvcmRQb2xpY3k6IHtcbiAgICAgICAgICAgICAgICBtaW5MZW5ndGg6IDgsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBjbGllbnRXcml0ZUF0dHJpYnV0ZXMgPSAobmV3IGNvZ25pdG8uQ2xpZW50QXR0cmlidXRlcygpKVxuICAgICAgICAgICAgLndpdGhTdGFuZGFyZEF0dHJpYnV0ZXMoe1xuICAgICAgICAgICAgICAgIGZ1bGxuYW1lOiB0cnVlLFxuICAgICAgICAgICAgICAgIGVtYWlsOiB0cnVlLFxuICAgICAgICAgICAgICAgIHBob25lTnVtYmVyOiB0cnVlLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC53aXRoQ3VzdG9tQXR0cmlidXRlcygndXNlcklkJyk7XG5cbiAgICAgICAgY29uc3QgY2xpZW50UmVhZEF0dHJpYnV0ZXMgPSBjbGllbnRXcml0ZUF0dHJpYnV0ZXNcblxuICAgICAgICBjb25zdCBjbGllbnQgPSB1c2VyUG9vbC5hZGRDbGllbnQoJ0NnbFVzZXJBcHBDbGllbnQnLCB7XG4gICAgICAgICAgICB1c2VyUG9vbENsaWVudE5hbWU6ICdDZ2xVc2VyQXV0aGVBcHBDbGllbnQnLFxuICAgICAgICAgICAgYWNjZXNzVG9rZW5WYWxpZGl0eTogY2RrLkR1cmF0aW9uLm1pbnV0ZXMoNjApLFxuICAgICAgICAgICAgaWRUb2tlblZhbGlkaXR5OiBjZGsuRHVyYXRpb24ubWludXRlcyg2MCksXG4gICAgICAgICAgICByZWZyZXNoVG9rZW5WYWxpZGl0eTogY2RrLkR1cmF0aW9uLmRheXMoMzApLFxuICAgICAgICAgICAgYXV0aEZsb3dzOiB7XG4gICAgICAgICAgICAgICAgY3VzdG9tOiB0cnVlLFxuICAgICAgICAgICAgICAgIHVzZXJTcnA6IHRydWUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJldmVudFVzZXJFeGlzdGVuY2VFcnJvcnM6IHRydWUsXG4gICAgICAgICAgICB3cml0ZUF0dHJpYnV0ZXM6IGNsaWVudFdyaXRlQXR0cmlidXRlcyxcbiAgICAgICAgICAgIHJlYWRBdHRyaWJ1dGVzOiBjbGllbnRSZWFkQXR0cmlidXRlcyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgY2xpZW50SWQgPSBjbGllbnQudXNlclBvb2xDbGllbnRJZDtcbiAgICAgICAgY29uc3QgdXNlclBvb2xJZCA9IHVzZXJQb29sLnVzZXJQb29sSWQ7XG5cbiAgICB9XG59XG4iXX0=